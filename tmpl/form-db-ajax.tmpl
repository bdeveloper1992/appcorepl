<!--form-db-ajax.tmpl-->
	<div class="modal db-search-modal" id="db-search-dialog" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
		<div class="modal-dialog modal-lg">
			<div class="modal-content">
				<div class="modal-header">
					<button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
					<h4 class="modal-title db-search-title">Choose Item</h4>
				</div>
				<div class="modal-body">
					<div class="input-group">
						<span class="input-group-addon">Search:</span>
						<input type="text" class="form-control filter-control" placeholder="Seach for an item by typing the first few letters">
					</div>
					<div class="list-group-wrapper">
						<div class="list-group">
							<!-- TODO: Load the search dialog with an initial list of items (e.g. the "empty search") -->
						</div>
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
				</div>
			</div>
		</div>
	</div><!--/.ref-add-modal-->
	<style>

		.db-search-modal   .list-group {
			border-radius: 0;
			border: 0;
			
		}
			.db-search-modal  .list-group-item:first-child,
			.db-search-modal  .list-group-item:last-child
			{
				border-radius: 0;
			}
			
			.db-search-modal  .list-group-item {
				border-left: 0;
				border-right: 0;
			}
			
			.db-search-modal  .list-group-item:first-child {
				border-top: 0;
			}
			
			.db-search-modal  .list-group-item:last-child {
				border-bottom: 0;
			}
		
			.db-search-modal .list-group-wrapper {
				border: 1px solid #ccc;
				height: 31rem;
				overflow: auto;
				border-top: 0;
			}
		
		
		/* This doesnt work - should disable the zoom-on-touch in the input on mobile browsers, but...nope...not on chrome anyway.
		.db-search-modal .filter-control {
			-moz-text-size-adjust: none;
			-webkit-text-size-adjust: none;
			-ms-text-size-adjust: none;
		}*/
	</style>

	<script>
		/* Add in our search dialog */
		var pageSize = 25;
		var PAGE_ONE_BASED = false;
		var dbLookupOptions = {
			minimumInputLength: 0,
			//width: 600,
			ajax: {
				quietMillis: 250,
				dataType: 'json',
				data: function (term, page) { // page is the one-based page number tracked by Select2
					return {
						term:  term, //search term
						start: (PAGE_ONE_BASED ? (page - 1) : page) * pageSize, // page number
						limit: pageSize,
					};
				},
				results: function (data, page) {
					var more = (page * pageSize) < data.total; // whether or not there are more results available
					//console.debug("results parser: more:",more,", total:",data.total,", page:",page,", pageSize:",pageSize,", math:", (page*pageSize));
				
					// notice we return the value of more so Select2 knows if more results can be loaded
					return { results: data.list, more: more };
				}
			},
			formatResult: function(result) {
				if(result == undefined || result == null || !result)
					return "";
					
				var text = result.value;
				//text = text.replace(/\s\((\d+[^\)]*)\)/, ' <span class=size>($1)</span>');
				return text;
			},
			formatSelection: function(result) {
				if(result == undefined || result == null || !result)
					return "";
					
				var text = result.value;
				//text = text.replace(/\s\((\d+[^\)]*)\)/, ' <span class=size>($1)</span>');
				return text;
			},
			initSelection: function(element, callback) {
				// the input tag has a value attribute preloaded that points to a preselected supplement's id
				// this function resolves that id attribute to an object that select2 can render
				// using its formatResult renderer - that way the supplement name is shown preselected
				var $elm = $(element),
					id = $elm.val(),
					initString = $elm.attr('x:initial-string');
				
				if(initString && initString != undefined)
				{
					callback({value: initString});
					return;
				}
				
				
				var id = $elm.val(),
					url = showItemChooser.hookUrlRoot+'/stringify?value=' + id;
					
				if (id !== "")
					$.ajax(url)
						.done(function(data) {
							
							//console.debug("Got data from server:", data.result);
							callback({value: data.result.text});
						});
			},
			
			//dropdownCssClass: "bigdrop", // apply css that makes the dropdown taller
			
			escapeMarkup: function (m) { return m; } // we do not want to escape markup since we are displaying html in results
		};

		function dbSearchDialogSetup()
		{
			var $dialog   = $('.db-search-modal');
			
			// Move dialog out of current document flow position and to end of body to avoid any local-specific styles
			$dialog.remove();
			$('body').append($dialog);
			
			var $filter   = $dialog.find('.filter-control');
			var $list     = $dialog.find('.list-group');
			var $listWrap = $dialog.find('.list-group-wrapper');
			var $title    = $dialog.find('.db-search-title');
			
			var specialRows = {
				noResult: $('<a href="#" class="list-group-item special-row alert alert-danger">No items found</a>'),
				loading:  $('<a href="#" class="list-group-item special-row alert alert-warning"><i class="fa fa-spin fa-spinner"></i> Loading more results ...</a>')
			};
			
			var currentPage = 0;
			var currentFilter = '';
			var hasMoreResults = true;
			
			// We're using a request queue so that servers that respond
			// with requests out-of-order can be properly sequenced
			var requestQueue = [];
			var requestCounter = 0;
			
			var resultSetBuffer = [];
			var latestResultSetFilter = '';
			
			var resultSetCounter = 0;
			var clickFirstResultWhenLoaded = false;
			
			var updateList = function(processedResults) {
				var list = processedResults.results;
				hasMoreResults = processedResults.more;
				
				if(currentPage == 0)
				{
					$list.empty();
				
					if(!list || list.length <= 0)
					{
						$list.append(specialRows.noResult);
						return;
					}
					
					// Add a special item at the very start of the list
					// to "clear" the current item (an option that, when clicked,
					// just clears the value in the box)
					list.unshift({
						clearResultItem: true
					});
					
				}
				
				//console.debug("updateList: currentPage:",currentPage,", items:", $list.find('.list-group-item'));
				latestResultSetFilter = currentFilter;
				
				var startIdx = resultSetBuffer.length;
				
				for(var i=0; i<list.length; i++)
				{
					var row = list[i];
					var html = row.clearResultItem ?
						"<i>(Reset/Clear currently selected " + 
							($title.attr('placeholder') ?
								$title.attr('placeholder') : 
								"Item")
							+ ")</i>" :
						dbLookupOptions.formatResult(row);
					
					var $wrap = $('<a href="#" class="list-group-item"></a>')
						.html(html)
						.attr('x:id',  row.clearResultItem ? '0' : row.id)
						.attr('x:idx', i + startIdx)
						.on('click', function() {
							
							var $elm       = $(this),
								id     = $elm.attr('x:id'),
								idx    = $elm.attr('x:idx'),
								result = resultSetBuffer[idx];
							
							var string = 
								result.clearResultItem ? '<i class="placeholder">(' + ($title.attr('placeholder') || 'Select an Item') + ')</i>' :
								dbLookupOptions.formatSelection(result);
							
							//console.debug("Clicked row ",idx,", id:",id,", result:",result,", string:",string);
							
							if(showItemChooser.currentWidget)
							{
								var w = showItemChooser.currentWidget;
								w.find('.txt').html(string);
								w.find('.btn').attr('title', string.replace(/<[^\>]+>/g,''));
								showItemChooser.currentElm.val(id).trigger('change');
							}
							
							$('.db-search-modal').modal('hide');
							return false;
						});
						
					$list.append($wrap);
					
					resultSetBuffer.push(row);
				}
				
				if(clickFirstResultWhenLoaded)
					$list.find('.list-group-item')
						.first()
						.addClass('active')
						.click();
			};
			
			var processResultQueue = function() {
				
				// Sort requests by sequence they were inserted
				requestQueue.sort(function(a,b) {
					return (a.id - b.id);
				});
				
				// Verify all results are complete - if anything is
				// incomplete (such as result 2 out of 5),
				// we want to wait until all data is completed
				var allCompleted = true;
				for(var x=0; x<requestQueue.length; x++)
					if(!requestQueue[x].rxd)
						allCompleted = false;
						
				//console.debug("processResultQueue: allCompleted:",allCompleted, ", queue:",requestQueue);
				
				if(!allCompleted)
					return;
				
				// Process the result queue since all are completed
				for(var x=0; x<requestQueue.length; x++)
				{
					//console.debug("processResultQueue: processing #",x);
					var requestData = requestQueue[x];
				
					if(requestData.page == 0)
					{
						$list.empty();
						$listWrap.scrollTop(0);
					}
					
					var processed = dbLookupOptions.ajax.results(requestData.results, requestData.page);
					updateList(processed);
				}
				
				// Suggested as fastest method to empty an array 
				// from http://stackoverflow.com/questions/1232040/empty-an-array-in-javascript
				while(requestQueue.length > 0)
					requestQueue.pop();
				
				specialRows.loading.remove();
			};
			
			var loadResultsPage = function(filter, page) {
				var data = dbLookupOptions.ajax.data(filter, page);
				
				//console.debug("loadResultsPage: data:",data, "page:",page);
				
				specialRows.noResult.remove();
				
				//if(page == 0)
					//$list.prepend(specialRows.loading);
				//else
					$list.append(specialRows.loading);
				
				resultSetCounter ++;
				
				var requestData = {
					page:		page,
					filter:		filter,
					results:	null,
					rxd:		false,
					id:		requestCounter ++,
				};
				
				requestQueue.push(requestData);
				
				
				$.ajax({
					url: showItemChooser.hookUrlRoot+'/search',
					data: data,
					success: function(result) {
						//console.debug("ajax results:",result);
						
						bufferNextPageLoad.locked = false;
						
						requestData.results = result;
						requestData.rxd     = true;
						
						processResultQueue();
					},
		
					error: function(result) {
						specialRows.loading.remove();
						
						bufferNextPageLoad.locked = false;
						
						//alert("Error:");
						//console.debug(result.responseText);
						$(document.body).html('<div class="alert alert-danger style="margin:1em 4em">'+result.responseText+'</div>');
					}
					
				});
			};
			
			var checkScrollPosition = function() {
				var top = $listWrap.scrollTop();
				var height = $listWrap.height();
				var scrollBottom = top + height;
				var contentHeight = $list.height();
				var triggerPercent = 90;
				var triggerPixel = contentHeight * (triggerPercent / 100);
				var hitTrigger = scrollBottom > triggerPixel;
				
				if(hitTrigger)
					bufferNextPageLoad();
			};
			
			var bufferNextPageLoad = function() {
				if(bufferNextPageLoad.locked)
					return;
				
				if(!hasMoreResults)
					return;
				
				currentPage ++;
				loadResultsPage(currentFilter, currentPage);
			};
			
			var queryResults = function() {
				
				var filter = $filter.val();
				filter = filter.replace(/(^\s+|\s+$)/g, '');
				
				//filter = "zym";
				specialRows.noResult.remove();
				
				currentFilter = filter;
				currentPage = 0;
				hasMoreResults = true;
				resultSetBuffer = [];
				
				loadResultsPage(currentFilter, currentPage);
				
			};
			
			var bufferQueryResults = function(event) {
				
				clickFirstResultWhenLoaded = false;
				
				var escPressed = event.which == 27;
				if(escPressed)
					return;
				
				var enterPressed = event.which == 13;
				if(enterPressed) 
				{
					var filter = $filter.val();
					filter = filter.replace(/(^\s+|\s+$)/g, '');
				
					// Only click the first entry if its loaded AND
					// if the filter in the box matches the filter
					// used to load current result set
					if(resultSetBuffer.length > 0 && 
						latestResultSetFilter == filter)
					{
						$list.find('.list-group-item')
							.first()
							.addClass('active')
							.click();
						return;
					}
					else
					{
						// If either test failed, fall thru to loaded
						// a new result set, and flag the first one
						// to be 'clicked' as soon as its loaded
						clickFirstResultWhenLoaded = true;
					}
					
					//console.debug("enterPressed, resultSetBuffer.length:",resultSetBuffer.length,", clickFirstResultWhenLoaded:",clickFirstResultWhenLoaded);
					
					
				}
				
				// Delay X ms then load the result from the server
				clearTimeout(bufferQueryResults.tid);
				bufferQueryResults.tid = setTimeout(queryResults, dbLookupOptions.ajax.quietMillis);
			};
			
			$listWrap.on('scroll', checkScrollPosition);
			$filter.on('change', bufferQueryResults);
			$filter.on('keyup',  bufferQueryResults);
		}
		
		// From http://stackoverflow.com/questions/20989458/select2-open-dropdown-on-focus
		function select2Focus() {
			var select2 = $(this).data('select2');
			setTimeout(function() {
				if (!select2.opened()) {
					//select2.open();
				}
			}, 0);  
		}
		
		
		function setupLookupUi($jq, hookUrlRoot, openFlag)
		{
			showItemChooser.hookUrlRoot   = hookUrlRoot;
			
			var pageSize = 25;
			$jq.on('change', function() {
				
				var $input = $(this);
				
				//checkForBackorder($input);
				//updatePricing($input);
				
				//console.debug("got new id:",id);
			});
			
			
			//$('select').select2();

			var ENABLE_SELECT2 = false;
			
			var isMobile = window.matchMedia("only screen and (max-width: 1024px)").matches;
			if(ENABLE_SELECT2 && 
				!isMobile && 
				typeof($jq.select2) == 'function')
			{
				// Used by the ajax code in dbLookupOptions
				PAGE_ONE_BASED = true;

				var opts = {}; 
				for(var key in dbLookupOptions)
					opts[key] = dbLookupOptions[key];
				
				opts.ajax = {};
				for(var key in dbLookupOptions.ajax)
					opts.ajax[key] = dbLookupOptions.ajax[key];
				
				opts.ajax.url = hookUrlRoot+'/search';
				console.debug("New opts:",opts);
				
				$jq.select2(opts);
				$jq
					.one('select2-focus', select2Focus)
					.on('select2-blur', function () {
						$(this).one('select2-focus', select2Focus)
					});
					
				if(openFlag)
					$jq.select2('open');
					
				//console.log(hookUrlRoot, dbLookupOptions);
				
				//console.log($jq, $jq.select2);
				//$jq.on('select2-blur',  select2Focus);
				
				return;
			}
			
			
			var buttonHtml = [
				'<div class="btn-group db-search-btn">',
					'<button type="button" class="btn btn-default dropdown-toggle btn-sm">',
						'<span class="txt"></span>',
						'<span class="caret"></span>',
					'</button>',
					
					// Can't get styling to work with this to prevent wrapping around 768px, so not using it for now
					//'<button class="btn btn-info btn-sm">...</button>',
				'</div>'
			].join('');
			
			$jq.each(function() {
				var $elm = $(this);
				
				var $widget = $(buttonHtml);
				
				$widget.find('.txt').html('<i class="placeholder">(' + ($elm.attr('placeholder') || 'Select an Item') + ')</i>');
				
				$widget.insertAfter($elm);
				$elm.hide();
				
				//var initString = $elm.attr('x:initial-string');
				//$widget.find('.txt').html(initString);
				
				var currentVal = $elm.val();
				if(currentVal.match(/^\d+$/))
				{
					dbLookupOptions.initSelection(this, function(result) {
						$widget.find('.txt').html(
							dbLookupOptions.formatSelection(result)
						);
					});
				}
				else
				{
					$widget.find('.txt').html(currentVal || '<i class="placeholder">(' + ($elm.attr('placeholder') || 'Select an Item') + ')</i>');
				}
				
				$widget.bind('click', function() {
					showItemChooser($widget, $elm, hookUrlRoot);
				});
				
			});
		};
		
		function showItemChooser($widget, $elm, hookUrlRoot)
		{
			// $widget is the UI widget (button, etc)
			// $elm is the hidden input element that gets passed back to the server
			
			showItemChooser.currentWidget = $widget;
			showItemChooser.currentElm    = $elm;
			showItemChooser.hookUrlRoot   = hookUrlRoot;
			
			var $dialog   = $('.db-search-modal');
			var $list     = $dialog.find('.list-group');
			var $listWrap = $dialog.find('.list-group-wrapper');
			var $filter   = $dialog.find('.filter-control');
			var $title    = $dialog.find('.db-search-title');
			
			// Set Title
			$title.html('Choose '+$elm.attr('placeholder'));
			
			// Store placeholder on the dialog for use later in the 'clear item' code
			$title.attr('placeholder', $elm.attr('placeholder'));
			
			// Reset dialog
			$list.empty();
			//$list.find('.list-group-item').remove();
			$listWrap.scrollTop(0);
			
			// Reset filter 
			$filter.val('').trigger('change');
			
			//$dialog.find('.list-group-wrapper').scrollTop(0);

			$dialog.modal({ show: true });
					
			var isMobile = window.matchMedia("only screen and (max-width: 770px)").matches;
			//console.debug(isMobile);
		
			// We dont want to force focus into the filter control on "mobile" devices
			// because that will (could) pop up an onscreen keyboard would would
			// obscure a lot of the list
			if(!isMobile)
				$filter.focus(); //.select();
			
		}
		
		
		$(function() {
		
			dbSearchDialogSetup();
		});
		
		function databaseLookupHook($elm, urlRoot, formUuid)
		{
			var hookUrlRoot = urlRoot+'/'+formUuid;
			
			setupLookupUi($elm, hookUrlRoot);		
		}
	</script>

	<style>
		.form-input-group {
			display: inline-block;
		}
		
		.form-input-group .db-search-btn {
			/*margin-left: .25em;*/
		}
		
		.form-input-group .db-search-btn .placeholder {
			color: rgba(0,0,0,0.8);
			font-weight: normal;
			
		}
		
		.form-input-group .db-search-btn .caret {
			margin-left: 6px;
			margin-right: 0px;
		}
		
		/* Styling for the '...' button, not used right now */
		/*.form-input-group .db-search-btn {
			white-space: nowrap;
		}
		
		.form-input-group .db-search-btn .btn  {
			display: inline-block;
		}
		
		.form-input-group .db-search-btn .btn + .btn {
			margin-left: -2px;
		}
		
		.form-input-group .db-search-btn .btn:first-child {
			margin-right: 0;
		}*/
	</style>

<!--/.form-db-ajax.tmpl-->